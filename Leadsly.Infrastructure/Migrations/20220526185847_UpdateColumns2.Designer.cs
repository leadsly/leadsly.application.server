// <auto-generated />
using System;
using System.Collections.Generic;
using Leadsly.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leadsly.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220526185847_UpdateColumns2")]
    partial class UpdateColumns2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserOrganization", b =>
                {
                    b.Property<string>("OrganizationUsersId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationsOrganizationId")
                        .HasColumnType("text");

                    b.HasKey("OrganizationUsersId", "OrganizationsOrganizationId");

                    b.HasIndex("OrganizationsOrganizationId");

                    b.ToTable("ApplicationUserOrganization");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Customer_StripeId")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalProvider")
                        .HasColumnType("text");

                    b.Property<string>("ExternalProviderUserId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Customer_StripeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Campaign", b =>
                {
                    b.Property<string>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CampaignProspectListId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CampaignType")
                        .HasColumnType("integer");

                    b.Property<int>("DailyInvites")
                        .HasColumnType("integer");

                    b.Property<long>("EndTimestamp")
                        .HasColumnType("bigint");

                    b.Property<bool>("Expired")
                        .HasColumnType("boolean");

                    b.Property<string>("HalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsWarmUpEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("StartTimestamp")
                        .HasColumnType("bigint");

                    b.HasKey("CampaignId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CampaignProspectListId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspect", b =>
                {
                    b.Property<string>("CampaignProspectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<long>("AcceptedTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CampaignProspectListId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ConnectionSent")
                        .HasColumnType("boolean");

                    b.Property<long>("ConnectionSentTimestamp")
                        .HasColumnType("bigint");

                    b.Property<bool>("FollowUpComplete")
                        .HasColumnType("boolean");

                    b.Property<bool>("FollowUpMessageSent")
                        .HasColumnType("boolean");

                    b.Property<long>("LastFollowUpMessageSentTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProspectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Replied")
                        .HasColumnType("boolean");

                    b.Property<string>("ResponseMessage")
                        .HasColumnType("text");

                    b.Property<int>("SentFollowUpMessageOrderNum")
                        .HasColumnType("integer");

                    b.HasKey("CampaignProspectId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("CampaignProspectListId");

                    b.HasIndex("PrimaryProspectId");

                    b.ToTable("CampaignProspects");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectFollowUpMessage", b =>
                {
                    b.Property<string>("CampaignProspectFollowUpMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignProspectId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("CampaignProspectFollowUpMessageId");

                    b.HasIndex("CampaignProspectId");

                    b.ToTable("CampaignProspectFollowUpMessages");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", b =>
                {
                    b.Property<string>("CampaignProspectListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProspectListId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProspectListName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CampaignProspectListId");

                    b.HasIndex("PrimaryProspectListId");

                    b.ToTable("CampaignProspectLists");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignWarmUp", b =>
                {
                    b.Property<string>("CampaignWarmUpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DailyLimit")
                        .HasColumnType("integer");

                    b.Property<long>("StartDateTimestamp")
                        .HasColumnType("bigint");

                    b.HasKey("CampaignWarmUpId");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignWarmUps");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessage", b =>
                {
                    b.Property<string>("FollowUpMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("FollowUpMessageId");

                    b.HasIndex("CampaignId");

                    b.ToTable("FollowUpMessages");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessageDelay", b =>
                {
                    b.Property<string>("FollowUpMessageDelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("FollowUpMessageId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("FollowUpMessageDelayId");

                    b.HasIndex("FollowUpMessageId")
                        .IsUnique();

                    b.ToTable("FollowUpMessageDelay");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ChromeProfile", b =>
                {
                    b.Property<string>("ChromeProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("CampaignPhaseType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChromeProfileId");

                    b.ToTable("ChromeProfileNames");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ConnectionWithdrawPhase", b =>
                {
                    b.Property<string>("ConnectionWithdrawPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ConnectionWithdrawPhaseId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("ConnectionWithdrawPhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.FollowUpMessagePhase", b =>
                {
                    b.Property<string>("FollowUpMessagePhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.HasKey("FollowUpMessagePhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("FollowUpMessagesPhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.MonitorForNewConnectionsPhase", b =>
                {
                    b.Property<string>("MonitorForNewConnectionsPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("MonitorForNewConnectionsPhaseId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("MonitorForNewConnectionsPhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ProspectListPhase", b =>
                {
                    b.Property<string>("ProspectListPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<long>("CompletedTimestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.Property<List<string>>("SearchUrls")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("ProspectListPhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("ProspectListPhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ScanProspectsForRepliesPhase", b =>
                {
                    b.Property<string>("ScanProspectsForRepliesPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("PageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ScanProspectsForRepliesPhaseId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("ScanProspectsForRepliesPhase");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.SendConnectionRequestPhase", b =>
                {
                    b.Property<string>("SendConnectionRequestPhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.HasKey("SendConnectionRequestPhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("SendConnectionRequestPhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.SendEmailInvitePhase", b =>
                {
                    b.Property<string>("SendEmailInvitePhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PhaseType")
                        .HasColumnType("integer");

                    b.HasKey("SendEmailInvitePhaseId");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.ToTable("SendEmailInvitePhases");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspect", b =>
                {
                    b.Property<string>("PrimaryProspectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<long>("AddedTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmploymentInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProspectListId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SearchResultAvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PrimaryProspectId");

                    b.HasIndex("PrimaryProspectListId");

                    b.ToTable("PrimaryProspects");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", b =>
                {
                    b.Property<string>("PrimaryProspectListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<long>("CreatedTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PrimaryProspectListId");

                    b.HasIndex("UserId");

                    b.ToTable("PrimaryProspectLists");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrl", b =>
                {
                    b.Property<string>("SearchUrlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignProspectListId")
                        .HasColumnType("text");

                    b.Property<string>("PrimaryProspectListId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SearchUrlId");

                    b.HasIndex("CampaignProspectListId");

                    b.HasIndex("PrimaryProspectListId");

                    b.ToTable("SearchUrls");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrlDetails", b =>
                {
                    b.Property<string>("SearchUrlDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("FinishedCrawling")
                        .HasColumnType("boolean");

                    b.Property<long>("LastActivityTimestamp")
                        .HasColumnType("bigint");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StartedCrawling")
                        .HasColumnType("boolean");

                    b.Property<string>("WindowHandleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SearchUrlDetailsId");

                    b.HasIndex("CampaignId");

                    b.ToTable("SentConnectionsStatuses");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrlProgress", b =>
                {
                    b.Property<string>("SearchUrlProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Exhausted")
                        .HasColumnType("boolean");

                    b.Property<long>("LastActivityTimestamp")
                        .HasColumnType("bigint");

                    b.Property<int>("LastPage")
                        .HasColumnType("integer");

                    b.Property<int>("LastProcessedProspect")
                        .HasColumnType("integer");

                    b.Property<string>("SearchUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("StartedCrawling")
                        .HasColumnType("boolean");

                    b.Property<string>("WindowHandleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SearchUrlProgressId");

                    b.HasIndex("CampaignId");

                    b.ToTable("SearchUrlsProgress");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SendConnectionsStage", b =>
                {
                    b.Property<string>("SendConnectionsStageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CampaignId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumOfConnections")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SendConnectionsStageId");

                    b.HasIndex("CampaignId");

                    b.ToTable("SendConnectionsStages");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.CloudMapServiceDiscoveryService", b =>
                {
                    b.Property<string>("CloudMapServiceDiscoveryServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Arn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EcsServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NamespaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceDiscoveryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CloudMapServiceDiscoveryServiceId");

                    b.HasIndex("EcsServiceId")
                        .IsUnique();

                    b.ToTable("CloudMapServiceDiscoveryServices");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Customer_Stripe", b =>
                {
                    b.Property<string>("Customer_StripeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Customer_StripeId");

                    b.ToTable("StripeCustomers", (string)null);
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsService", b =>
                {
                    b.Property<string>("EcsServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssignPublicIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClusterArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DesiredCount")
                        .HasColumnType("integer");

                    b.Property<string>("SchedulingStrategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountCloudResourceId")
                        .HasColumnType("text");

                    b.Property<string>("TaskDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EcsServiceId");

                    b.HasIndex("SocialAccountCloudResourceId")
                        .IsUnique();

                    b.ToTable("EcsServices");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsServiceRegistry", b =>
                {
                    b.Property<string>("EcsServiceRegistryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("EcsServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistryArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EcsServiceRegistryId");

                    b.HasIndex("EcsServiceId");

                    b.ToTable("EcsServiceRegistries");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsTaskDefinition", b =>
                {
                    b.Property<string>("EcsTaskDefinitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EcsTaskDefinitionId");

                    b.ToTable("EcsTaskDefinitions");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.HalUnit", b =>
                {
                    b.Property<string>("HalUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndHour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StartHour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("HalUnitId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("HalUnits");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Organization", b =>
                {
                    b.Property<string>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.OrphanedCloudResource", b =>
                {
                    b.Property<string>("OrphanedCloudResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Arn")
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text");

                    b.Property<string>("ResourceName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("OrphanedCloudResourceId");

                    b.ToTable("OrphanedCloudResources");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccount", b =>
                {
                    b.Property<string>("SocialAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("ConfiguredWithUsersLeadslyAccount")
                        .HasColumnType("boolean");

                    b.Property<bool>("MonthlySearchLimitReached")
                        .HasColumnType("boolean");

                    b.Property<bool>("RunProspectListFirst")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SocialAccountId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialAccounts");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccountCloudResource", b =>
                {
                    b.Property<string>("SocialAccountCloudResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CloudMapServiceDiscoveryServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EcsTaskDefinitionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HalId")
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SocialAccountCloudResourceId");

                    b.HasIndex("CloudMapServiceDiscoveryServiceId");

                    b.HasIndex("EcsTaskDefinitionId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("SocialAccountResources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserOrganization", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Customer_Stripe", "Customer_Stripe")
                        .WithMany()
                        .HasForeignKey("Customer_StripeId");

                    b.Navigation("Customer_Stripe");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Campaign", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Campaigns")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", "CampaignProspectList")
                        .WithMany()
                        .HasForeignKey("CampaignProspectListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("CampaignProspectList");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspect", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", "CampaignProspectList")
                        .WithMany("CampaignProspects")
                        .HasForeignKey("CampaignProspectListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspect", "PrimaryProspect")
                        .WithMany()
                        .HasForeignKey("PrimaryProspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("CampaignProspectList");

                    b.Navigation("PrimaryProspect");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectFollowUpMessage", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.CampaignProspect", "CampaignProspect")
                        .WithMany("FollowUpMessages")
                        .HasForeignKey("CampaignProspectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampaignProspect");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", "PrimaryProspectList")
                        .WithMany()
                        .HasForeignKey("PrimaryProspectListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryProspectList");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignWarmUp", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessage", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("FollowUpMessages")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessageDelay", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessage", "FollowUpMessage")
                        .WithOne("Delay")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessageDelay", "FollowUpMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FollowUpMessage");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ConnectionWithdrawPhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccount", "SocialAccount")
                        .WithOne("ConnectionWithdrawPhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.ConnectionWithdrawPhase", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.FollowUpMessagePhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithOne("FollowUpMessagePhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.FollowUpMessagePhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.MonitorForNewConnectionsPhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccount", "SocialAccount")
                        .WithOne("MonitorForNewProspectsPhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.MonitorForNewConnectionsPhase", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ProspectListPhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithOne("ProspectListPhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.ProspectListPhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.ScanProspectsForRepliesPhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccount", "SocialAccount")
                        .WithOne("ScanProspectsForRepliesPhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.ScanProspectsForRepliesPhase", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.SendConnectionRequestPhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithOne("SendConnectionRequestPhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.SendConnectionRequestPhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Phases.SendEmailInvitePhase", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithOne("SendEmailInvitePhase")
                        .HasForeignKey("Leadsly.Application.Model.Entities.Campaigns.Phases.SendEmailInvitePhase", "CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspect", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", "PrimaryProspectList")
                        .WithMany("PrimaryProspects")
                        .HasForeignKey("PrimaryProspectListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryProspectList");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", "User")
                        .WithMany("ProspectLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrl", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", null)
                        .WithMany("SearchUrls")
                        .HasForeignKey("CampaignProspectListId");

                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", "PrimaryProspectList")
                        .WithMany("SearchUrls")
                        .HasForeignKey("PrimaryProspectListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryProspectList");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrlDetails", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("SentConnectionsStatuses")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SearchUrlProgress", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("SearchUrlsProgress")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.SendConnectionsStage", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.Campaigns.Campaign", "Campaign")
                        .WithMany("SendConnectionStages")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.CloudMapServiceDiscoveryService", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.EcsService", "EcsService")
                        .WithOne("CloudMapServiceDiscoveryService")
                        .HasForeignKey("Leadsly.Application.Model.Entities.CloudMapServiceDiscoveryService", "EcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcsService");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsService", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccountCloudResource", "SocialAccountCloudResource")
                        .WithOne("EcsService")
                        .HasForeignKey("Leadsly.Application.Model.Entities.EcsService", "SocialAccountCloudResourceId");

                    b.Navigation("SocialAccountCloudResource");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsServiceRegistry", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.EcsService", "EcsService")
                        .WithMany("EcsServiceRegistries")
                        .HasForeignKey("EcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcsService");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.HalUnit", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("HalDetails")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccount", "SocialAccount")
                        .WithOne("HalDetails")
                        .HasForeignKey("Leadsly.Application.Model.Entities.HalUnit", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccount", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany("SocialAccounts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccountCloudResource", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.CloudMapServiceDiscoveryService", "CloudMapServiceDiscoveryService")
                        .WithMany()
                        .HasForeignKey("CloudMapServiceDiscoveryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.EcsTaskDefinition", "EcsTaskDefinition")
                        .WithMany()
                        .HasForeignKey("EcsTaskDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.SocialAccount", "SocialAccount")
                        .WithOne("SocialAccountCloudResource")
                        .HasForeignKey("Leadsly.Application.Model.Entities.SocialAccountCloudResource", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloudMapServiceDiscoveryService");

                    b.Navigation("EcsTaskDefinition");

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Leadsly.Application.Model.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("HalDetails");

                    b.Navigation("ProspectLists");

                    b.Navigation("SocialAccounts");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.Campaign", b =>
                {
                    b.Navigation("FollowUpMessagePhase")
                        .IsRequired();

                    b.Navigation("FollowUpMessages");

                    b.Navigation("ProspectListPhase")
                        .IsRequired();

                    b.Navigation("SearchUrlsProgress");

                    b.Navigation("SendConnectionRequestPhase")
                        .IsRequired();

                    b.Navigation("SendConnectionStages");

                    b.Navigation("SendEmailInvitePhase")
                        .IsRequired();

                    b.Navigation("SentConnectionsStatuses");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspect", b =>
                {
                    b.Navigation("FollowUpMessages");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.CampaignProspectList", b =>
                {
                    b.Navigation("CampaignProspects");

                    b.Navigation("SearchUrls");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.FollowUpMessage", b =>
                {
                    b.Navigation("Delay")
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.Campaigns.PrimaryProspectList", b =>
                {
                    b.Navigation("PrimaryProspects");

                    b.Navigation("SearchUrls");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.EcsService", b =>
                {
                    b.Navigation("CloudMapServiceDiscoveryService")
                        .IsRequired();

                    b.Navigation("EcsServiceRegistries");
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccount", b =>
                {
                    b.Navigation("ConnectionWithdrawPhase")
                        .IsRequired();

                    b.Navigation("HalDetails")
                        .IsRequired();

                    b.Navigation("MonitorForNewProspectsPhase")
                        .IsRequired();

                    b.Navigation("ScanProspectsForRepliesPhase")
                        .IsRequired();

                    b.Navigation("SocialAccountCloudResource")
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Application.Model.Entities.SocialAccountCloudResource", b =>
                {
                    b.Navigation("EcsService")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
