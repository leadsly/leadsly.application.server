// <auto-generated />
using System;
using Leadsly.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Leadsly.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220217204359_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserOrganization", b =>
                {
                    b.Property<string>("OrganizationUsersId")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationsId")
                        .HasColumnType("text");

                    b.HasKey("OrganizationUsersId", "OrganizationsId");

                    b.HasIndex("OrganizationsId");

                    b.ToTable("ApplicationUserOrganization");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Customer_StripeId")
                        .HasColumnType("text");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ExternalProvider")
                        .HasColumnType("text");

                    b.Property<string>("ExternalProviderUserId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Customer_StripeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Leadsly.Models.Entities.Campaign", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ConnectionsAccepted")
                        .HasColumnType("bigint");

                    b.Property<long>("ConnectionsSentDaily")
                        .HasColumnType("bigint");

                    b.Property<bool>("Expired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProfileViews")
                        .HasColumnType("bigint");

                    b.Property<long>("Replies")
                        .HasColumnType("bigint");

                    b.Property<long>("TotalConnectionsSent")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.CloudMapServiceDiscoveryService", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Arn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EcsServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NamespaceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceDiscoveryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcsServiceId")
                        .IsUnique();

                    b.ToTable("CloudMapServiceDiscoveryServices");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.Customer_Stripe", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StripeCustomers", (string)null);
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsService", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AssignPublicIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClusterArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DesiredCount")
                        .HasColumnType("integer");

                    b.Property<string>("SchedulingStrategy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountCloudResourceId")
                        .HasColumnType("text");

                    b.Property<string>("TaskDefinition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SocialAccountCloudResourceId")
                        .IsUnique();

                    b.ToTable("EcsServices");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsServiceRegistry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("EcsServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RegistryArn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EcsServiceId");

                    b.ToTable("EcsServiceRegistries");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsTaskDefinition", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ContainerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EcsTaskDefinitions");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.Organization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.OrphanedCloudResource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Arn")
                        .HasColumnType("text");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<string>("ResourceId")
                        .HasColumnType("text");

                    b.Property<string>("ResourceName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrphanedCloudResources");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccount", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<bool>("ConfiguredWithUsersLeadslyAccount")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialAccounts");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccountCloudResource", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CloudMapServiceDiscoveryServiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EcsTaskDefinitionId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HalsUniqueName")
                        .HasColumnType("text");

                    b.Property<string>("SocialAccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CloudMapServiceDiscoveryServiceId");

                    b.HasIndex("EcsTaskDefinitionId");

                    b.HasIndex("SocialAccountId")
                        .IsUnique();

                    b.ToTable("SocialAccountResources");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserOrganization", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Models.Entities.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Models.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.Customer_Stripe", "Customer_Stripe")
                        .WithMany()
                        .HasForeignKey("Customer_StripeId");

                    b.Navigation("Customer_Stripe");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.Campaign", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Campaigns")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.CloudMapServiceDiscoveryService", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.EcsService", "EcsService")
                        .WithOne("CloudMapServiceDiscoveryService")
                        .HasForeignKey("Leadsly.Models.Entities.CloudMapServiceDiscoveryService", "EcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcsService");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsService", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.SocialAccountCloudResource", "SocialAccountCloudResource")
                        .WithOne("EcsService")
                        .HasForeignKey("Leadsly.Models.Entities.EcsService", "SocialAccountCloudResourceId");

                    b.Navigation("SocialAccountCloudResource");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsServiceRegistry", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.EcsService", "EcsService")
                        .WithMany("EcsServiceRegistries")
                        .HasForeignKey("EcsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EcsService");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccount", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany("SocialAccounts")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccountCloudResource", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.CloudMapServiceDiscoveryService", "CloudMapServiceDiscoveryService")
                        .WithMany()
                        .HasForeignKey("CloudMapServiceDiscoveryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Models.Entities.EcsTaskDefinition", "EcsTaskDefinition")
                        .WithMany()
                        .HasForeignKey("EcsTaskDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Models.Entities.SocialAccount", "SocialAccount")
                        .WithOne("SocialAccountCloudResource")
                        .HasForeignKey("Leadsly.Models.Entities.SocialAccountCloudResource", "SocialAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CloudMapServiceDiscoveryService");

                    b.Navigation("EcsTaskDefinition");

                    b.Navigation("SocialAccount");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Leadsly.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("SocialAccounts");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.EcsService", b =>
                {
                    b.Navigation("CloudMapServiceDiscoveryService")
                        .IsRequired();

                    b.Navigation("EcsServiceRegistries");
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccount", b =>
                {
                    b.Navigation("SocialAccountCloudResource")
                        .IsRequired();
                });

            modelBuilder.Entity("Leadsly.Models.Entities.SocialAccountCloudResource", b =>
                {
                    b.Navigation("EcsService")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
